#!/bin/sh
#
# hoooks for generating /etc/resolv.conf
#
# DNS server addresses are given by DHCP server
# Google public DNS servers are appended as well

resolv_conf_lock=/tmp/resolv.conf.lock

# 3s for flock timeout
flock_timeout=3

# usage: set_dns_props <DNS server lists>
#        the DNS servers in the list could be either IPv4 or IPv6,
#        but not both.
set_dns_props()
{
    # use flock to avoid race condition while updating /etc/resolv.conf
    # from multiple processes
    if test $# -ge 1; then
        flock -w ${flock_timeout} ${resolv_conf_lock} /etc/dhcpcd/update_resolv_config $*
    fi
}

set_rdnss_from_ra()
{
    # read DNS servers from IPv6 SLAAC RDNSS option
    # and pass it to function set_dns_props()
    local rdnss_server_list=""
    if test -n "$ra_count"; then
        i=1
        while test $i -le $ra_count; do
            eval "rdnss=\${ra${i}_rdnss}"
            if test -n "$rdnss"; then
                rdnss_server_list="$rdnss_server_list $rdnss"
            fi
            i=$((i+1))
        done
        set_dns_props $rdnss_server_list
    fi

}

set_dns_from_dhcp()
{
    set_dns_props $new_domain_name_servers
}

unset_dns_props()
{
# do nothing right now
	return 0
}

case "${reason}" in
BOUND|INFORM|REBIND|REBOOT|RENEW|TIMEOUT|STATIC)
    echo `date`: resolv: ${reason} >> ${state_dir}/hooks.log
    set_dns_from_dhcp
    ;;
ROUTERADVERT)
    echo `date`: resolv: ${reason} >> ${state_dir}/hooks.log
    set_rdnss_from_ra
    ;;
EXPIRE|FAIL|IPV4LL|RELEASE|STOP)
    echo `date`: resolv: ${reason} >> ${state_dir}/hooks.log
    unset_dns_props
    ;;
esac
